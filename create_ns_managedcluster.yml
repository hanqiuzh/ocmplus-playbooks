- name: "Creating namespace {{ namespace_name }} on {{ target_hosts }} host group"
  hosts: "{{ target_hosts }}"
  connection: local
  tasks:
  - name: "Get ClusterProxy URL for {{ hostvars[inventory_hostname].cluster_name }}"
    ocmplus.cm.cluster_proxy_addon:
      hub_kubeconfig: "{{ lookup('env', 'K8S_AUTH_KUBECONFIG') }}"
      managed_cluster: "{{ hostvars[inventory_hostname].cluster_name }}"
      wait: True
      timeout: 60
    register: cluster_proxy_url
  - name: debug
    debug:
      msg: "{{ cluster_proxy_url.cluster_url }}"

  - name: "Get managed ServiceAccount token for {{ hostvars[inventory_hostname].cluster_name }}"
    ocmplus.cm.managed_serviceaccount:
      state: present
      hub_kubeconfig: "{{ lookup('env', 'K8S_AUTH_KUBECONFIG') }}"
      managed_cluster: "{{ hostvars[inventory_hostname].cluster_name }}"
      wait: True
      timeout: 60
      ttl_seconds_after_creation:  "{{ ttl_seconds | default(60) }}"
    register: managed_serviceaccount

  - name: debug
    debug:
      msg: "managed_serviceaccount_name: {{ managed_serviceaccount.managed_serviceaccount.name }}"

  - name: "Configure ServiceAccount RBAC for {{ hostvars[inventory_hostname].cluster_name }}"
    ocmplus.cm.managed_serviceaccount_rbac:
      hub_kubeconfig: "{{ lookup('env', 'K8S_AUTH_KUBECONFIG') }}"
      managed_cluster: "{{ hostvars[inventory_hostname].cluster_name }}"
      managed_serviceaccount_name: "{{ managed_serviceaccount.managed_serviceaccount.name }}"
      rbac_template: rbac/clusterrolebinding.yml
      wait: True
      timeout: 60
    register: result
    ignore_errors: true
    when: hostvars[inventory_hostname].cluster_name != skipped_rbac_cluster_name|default('')

  - name: "Creating namespace {{ namespace_name }} on {{ hostvars[inventory_hostname].cluster_name }}"
    kubernetes.core.k8s:
      state: present
      host: "{{ cluster_proxy_url.cluster_url }}"
      validate_certs: no
      api_key: "{{managed_serviceaccount.managed_serviceaccount.token}}"
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: "{{ namespace_name }}"
